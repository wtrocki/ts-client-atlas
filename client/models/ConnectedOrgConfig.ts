/**
 * MongoDB Atlas Administration API
 * The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas.  The Atlas Administration API uses HTTP Digest Authentication to authenticate requests. Provide a programmatic API public key and corresponding private key as the username and password when constructing the HTTP request. For example, to [return database access history](#tag/Access-Tracking/operation/listAccessLogsByClusterName) with [cURL](https://en.wikipedia.org/wiki/CURL), run the following command in the terminal:  ``` curl --user \"{PUBLIC-KEY}:{PRIVATE-KEY}\" \\   --digest \\   --header \"Accept: application/vnd.atlas.2023-02-01+json\" \\   GET \"https://cloud.mongodb.com/api/atlas/v2/groups/{groupId}/dbAccessHistory/clusters/{clusterName}?pretty=true\" ```  To learn more, see [Get Started with the Atlas Administration API](https://www.mongodb.com/docs/atlas/configure-api-access/). For support, see [MongoDB Support](https://www.mongodb.com/support/get-started).
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AuthFederationRoleMapping } from '../models/AuthFederationRoleMapping';
import { FederatedUser } from '../models/FederatedUser';
import { HttpFile } from '../http/http';

export class ConnectedOrgConfig {
    /**
    * The collection of unique ids of the identity providers for org's data access.
    */

    'dataAccessIdentityProviderIds'?: Set<string>;
    /**
    * Approved domains that restrict users who can join the organization based on their email address.
    */

    'domainAllowList'?: Set<string>;
    /**
    * Value that indicates whether domain restriction is enabled for this connected org.
    */

    'domainRestrictionEnabled': boolean;
    /**
    * Unique 20-hexadecimal digit string that identifies the identity provider that this connected org config is associated with.
    */

    'identityProviderId': string;
    /**
    * Unique 24-hexadecimal digit string that identifies the connected organization configuration.
    */

    'orgId': string;
    /**
    * Atlas roles that are granted to a user in this organization after authenticating.
    */

    'postAuthRoleGrants'?: Set<string>;
    /**
    * Role mappings that are configured in this organization.
    */

    'roleMappings'?: Set<AuthFederationRoleMapping>;
    /**
    * List that contains the users who have an email address that doesn't match any domain on the allowed list.
    */

    'userConflicts'?: Array<FederatedUser>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "dataAccessIdentityProviderIds",
            "baseName": "dataAccessIdentityProviderIds",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "domainAllowList",
            "baseName": "domainAllowList",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "domainRestrictionEnabled",
            "baseName": "domainRestrictionEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "identityProviderId",
            "baseName": "identityProviderId",
            "type": "string",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "postAuthRoleGrants",
            "baseName": "postAuthRoleGrants",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "roleMappings",
            "baseName": "roleMappings",
            "type": "Set<AuthFederationRoleMapping>",
            "format": ""
        },
        {
            "name": "userConflicts",
            "baseName": "userConflicts",
            "type": "Array<FederatedUser>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ConnectedOrgConfig.attributeTypeMap;
    }

    public constructor() {
    }
}

