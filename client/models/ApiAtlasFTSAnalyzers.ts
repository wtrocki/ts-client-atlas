/**
 * MongoDB Atlas Administration API
 * The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas.  The Atlas Administration API uses HTTP Digest Authentication to authenticate requests. Provide a programmatic API public key and corresponding private key as the username and password when constructing the HTTP request. For example, to [return database access history](#tag/Access-Tracking/operation/listAccessLogsByClusterName) with [cURL](https://en.wikipedia.org/wiki/CURL), run the following command in the terminal:  ``` curl --user \"{PUBLIC-KEY}:{PRIVATE-KEY}\" \\   --digest \\   --header \"Accept: application/vnd.atlas.2023-02-01+json\" \\   GET \"https://cloud.mongodb.com/api/atlas/v2/groups/{groupId}/dbAccessHistory/clusters/{clusterName}?pretty=true\" ```  To learn more, see [Get Started with the Atlas Administration API](https://www.mongodb.com/docs/atlas/configure-api-access/). For support, see [MongoDB Support](https://www.mongodb.com/support/get-started).
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiAtlasFTSAnalyzersTokenizer } from '../models/ApiAtlasFTSAnalyzersTokenizer';
import { HttpFile } from '../http/http';

/**
* Settings that describe one Atlas Search custom analyzer.
*/
export class ApiAtlasFTSAnalyzers {
    /**
    * Filters that examine text one character at a time and perform filtering operations.
    */

    'charFilters'?: Array<any>;
    /**
    * Human-readable name that identifies the custom analyzer. Names must be unique within an index, and must not start with any of the following strings: - `lucene.` - `builtin.` - `mongodb.`
    */

    'name': string;
    /**
    * Filter that performs operations such as:  - Stemming, which reduces related words, such as \"talking\", \"talked\", and \"talks\" to their root word \"talk\".  - Redaction, the removal of sensitive information from public documents.
    */

    'tokenFilters'?: Array<any>;

    'tokenizer': ApiAtlasFTSAnalyzersTokenizer;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "charFilters",
            "baseName": "charFilters",
            "type": "Array<any>",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "tokenFilters",
            "baseName": "tokenFilters",
            "type": "Array<any>",
            "format": ""
        },
        {
            "name": "tokenizer",
            "baseName": "tokenizer",
            "type": "ApiAtlasFTSAnalyzersTokenizer",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ApiAtlasFTSAnalyzers.attributeTypeMap;
    }

    public constructor() {
    }
}

