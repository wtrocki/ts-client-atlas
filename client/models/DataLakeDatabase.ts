/**
 * MongoDB Atlas Administration API
 * The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { DataLakeDatabaseCollection } from '../models/DataLakeDatabaseCollection';
import { DataLakeView } from '../models/DataLakeView';
import { HttpFile } from '../http/http';

/**
* Database associated with this data lake. Databases contain collections and views.
*/
export class DataLakeDatabase {
    /**
    * Array of collections and data sources that map to a ``stores`` data store.
    */

    'collections'?: Array<DataLakeDatabaseCollection>;
    /**
    * Maximum number of wildcard collections in the database. This only applies to S3 data sources.
    */

    'maxWildcardCollections'?: number;
    /**
    * Human-readable label that identifies the database to which the data lake maps data.
    */

    'name'?: string;
    /**
    * Array of aggregation pipelines that apply to the collection. This only applies to S3 data sources.
    */

    'views'?: Array<DataLakeView>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "collections",
            "baseName": "collections",
            "type": "Array<DataLakeDatabaseCollection>",
            "format": ""
        },
        {
            "name": "maxWildcardCollections",
            "baseName": "maxWildcardCollections",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "views",
            "baseName": "views",
            "type": "Array<DataLakeView>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return DataLakeDatabase.attributeTypeMap;
    }

    public constructor() {
    }
}

