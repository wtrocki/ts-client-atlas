/**
 * MongoDB Atlas Administration API
 * The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* One or more settings that specify language-specific rules to compare strings within this index.
*/
export class Collation {
    /**
    * Method to handle whitespace and punctuation as base characters for purposes of comparison.  | Value | Evaluate Whitespace and Punctuation as Base Characters | |---|---| | `\"non-ignorable\"` | Yes | | `\"shifted\"` | No. MongoDB Cloud distinguishes these characters when `\"strength\" > 3`. | 
    */

    'alternate'?: string;
    /**
    * Flag that indicates whether strings with diacritics sort from back of the string. Some French dictionary orders strings in this way.  | Value | String Comparison Method |  |---|---| | `true` | Compare from back to front. | | `false` | Compare from front to back. | 
    */

    'backwards'?: boolean;
    /**
    * Method to handle sort order of case differences during tertiary level comparisons.  | Value | Sort Order Method |  |---|---|  | `\"upper\"` | Uppercase sorts before lowercase. |  | `\"lower\"` | Lowercase sorts before uppercase. |  | `\"off\"` | Similar to \"lower\" with slight differences. | 
    */

    'caseFirst'?: string;
    /**
    * Flag that indicates whether to include case comparison when `\"strength\" : 1` or `\"strength\" : 2`.  | Value | Compare case at level 1 or 2? | Strength Level | Comparisons Include |  |---|---|---|---|  | true | Yes | 1 | Base characters and case. |  |  |  | 2 | Base characters, diacritics (and possible other secondary differences),   and case. |  | false | No |  |  | 
    */

    'caseLevel'?: boolean;
    /**
    * International Components for Unicode (ICU) code that represents a localized language. To specify simple binary comparison, set `\"locale\" : \"simple\"`.
    */

    'locale': string;
    /**
    * Field that indicates which characters can be ignored when `\"alternate\" : \"shifted\"`. This has no affect if `\"alternate\" : \"non-ignorable\"`.  | Value | Ignore |  |---|---| | `\"punct\"` | Both whitespace and punctuation | | `\"space\"` | Whitespace | 
    */

    'maxVariable'?: string;
    /**
    * Flag that indicates whether to check if the text requires normalization and then perform it. Most text doesn't require this normalization processing.  | Value | Normalization Method |  |---|---| | `true` | Yes, check if fully normalized and perform normalization to compare text. | | `false` | No, don't check. | 
    */

    'normalization'?: boolean;
    /**
    * Flag that indicates whether to compare sequences of digits as numbers or as strings.  | Value | Comparison Method |  |---|---| | `true` | Compare as numbers. This results in `10 > 2`. | | `false` | Compare as strings. This results in `\"10\" < \"2\"`. | 
    */

    'numericOrdering'?: boolean;
    /**
    * Degree of comparison to perform when sorting words. MongoDB Cloud accepts the following values:  | Value | Comparison Level | Comparison Method | |---|---|---| | 1 | Primary | Compares the base characters only, ignoring other differences such as diacritics and case. | | 2 | Secondary | Compares base characters (primary) and diacritics (secondary). Primary differences take precedence over secondary differences. | | 3 | Tertiary | Compares base characters (primary), diacritics (secondary), and case and variants (tertiary). Differences between base characters takes precedence over secondary differences which take precedence over tertiary differences. | | 4 | Quaternary | Compares for the specific use case to consider punctuation when levels 1 through 3 ignore punctuation or for processing Japanese text. | | 5 | Identical | Compares for the specific use case of tie breaker. | 
    */

    'strength'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "alternate",
            "baseName": "alternate",
            "type": "string",
            "format": ""
        },
        {
            "name": "backwards",
            "baseName": "backwards",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "caseFirst",
            "baseName": "caseFirst",
            "type": "string",
            "format": ""
        },
        {
            "name": "caseLevel",
            "baseName": "caseLevel",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "locale",
            "baseName": "locale",
            "type": "string",
            "format": ""
        },
        {
            "name": "maxVariable",
            "baseName": "maxVariable",
            "type": "string",
            "format": ""
        },
        {
            "name": "normalization",
            "baseName": "normalization",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "numericOrdering",
            "baseName": "numericOrdering",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "strength",
            "baseName": "strength",
            "type": "number",
            "format": "int32"
        }    ];

    static getAttributeTypeMap() {
        return Collation.attributeTypeMap;
    }

    public constructor() {
    }
}


export type CollationAlternateEnum = "non-ignorable" | "shifted" ;
export type CollationCaseFirstEnum = "lower" | "false" | "upper" ;
export type CollationLocaleEnum = "af" | "sq" | "am" | "ar" | "hy" | "as" | "az" | "bn" | "be" | "bs" | "bs_Cyrl" | "bg" | "my" | "ca" | "chr" | "zh" | "zh_Hant" | "hr" | "cs" | "da" | "nl" | "dz" | "en" | "en_US" | "en_US_POSIX" | "eo" | "et" | "ee" | "fo" | "fil" | "fi_FI" | "fr" | "fr_CA" | "gl" | "ka" | "de" | "de_AT" | "el" | "gu" | "ha" | "haw" | "he" | "hi" | "hu" | "is" | "ig" | "smn" | "id" | "ga" | "it" | "ja" | "kl" | "kn" | "kk" | "km" | "kok" | "ko" | "ky" | "lk" | "lo" | "lv" | "li" | "lt" | "dsb" | "lb" | "mk" | "ms" | "ml" | "mt" | "mr" | "mn" | "ne" | "se" | "nb" | "nn" | "or" | "om" | "ps" | "fa" | "fa_AF" | "pl" | "pt" | "pa" | "ro" | "ru" | "sr" | "sr_Latn" | "si" | "sk" | "sl" | "es" | "sw" | "sv" | "ta" | "te" | "th" | "bo" | "to" | "tr" | "uk" | "hsb" | "ur" | "ug" | "vi" | "wae" | "cy" | "yi" | "yo" | "zu" ;
export type CollationMaxVariableEnum = "punct" | "space" ;

