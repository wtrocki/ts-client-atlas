/**
 * MongoDB Atlas Administration API
 * The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas.  The Atlas Administration API uses HTTP Digest Authentication to authenticate requests. Provide a programmatic API public key and corresponding private key as the username and password when constructing the HTTP request. For example, to [return database access history](#tag/Access-Tracking/operation/listAccessLogsByClusterName) with [cURL](https://en.wikipedia.org/wiki/CURL), run the following command in the terminal:  ``` curl --user \"{PUBLIC-KEY}:{PRIVATE-KEY}\" \\   --digest \\   --header \"Accept: application/vnd.atlas.2023-02-01+json\" \\   GET \"https://cloud.mongodb.com/api/atlas/v2/groups/{groupId}/dbAccessHistory/clusters/{clusterName}?pretty=true\" ```  To learn more, see [Get Started with the Atlas Administration API](https://www.mongodb.com/docs/atlas/configure-api-access/). For support, see [MongoDB Support](https://www.mongodb.com/support/get-started).
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* Request body for a cost explorer query.
*/
export class CostExplorerFilterRequestBody {
    /**
    * The list of projects to be included in the Cost Explorer Query.
    */

    'clusters'?: Array<string>;
    /**
    * The exclusive ending date for the Cost Explorer query. The date must be the start of a month.
    */

    'endDate': string;
    /**
    * The dimension to group the returned usage results by. At least one filter value needs to be provided for a dimension to be used.
    */

    'groupBy'?: string;
    /**
    * Flag to control whether usage that matches the filter criteria, but does not have values for all filter criteria is included in response. Default is false, which excludes the partially matching data.
    */

    'includePartialMatches'?: boolean;
    /**
    * The list of organizations to be included in the Cost Explorer Query.
    */

    'organizations'?: Array<string>;
    /**
    * The list of projects to be included in the Cost Explorer Query.
    */

    'projects'?: Array<string>;
    /**
    * The list of projects to be included in the Cost Explorer Query.
    */

    'services'?: Array<string>;
    /**
    * The inclusive starting date for the Cost Explorer query. The date must be the start of a month.
    */

    'startDate': string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "clusters",
            "baseName": "clusters",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "endDate",
            "baseName": "endDate",
            "type": "string",
            "format": "date"
        },
        {
            "name": "groupBy",
            "baseName": "groupBy",
            "type": "string",
            "format": ""
        },
        {
            "name": "includePartialMatches",
            "baseName": "includePartialMatches",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "organizations",
            "baseName": "organizations",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "projects",
            "baseName": "projects",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "startDate",
            "baseName": "startDate",
            "type": "string",
            "format": "date"
        }    ];

    static getAttributeTypeMap() {
        return CostExplorerFilterRequestBody.attributeTypeMap;
    }

    public constructor() {
    }
}

