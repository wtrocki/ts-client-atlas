/**
 * MongoDB Atlas Administration API
 * The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class ManagedNamespaces {
    /**
    * Human-readable label of the collection to manage for this Global Cluster.
    */
    'collection': string;
    /**
    * Database parameter used to divide the *collection* into shards. Global clusters require a compound shard key. This compound shard key combines the location parameter and the user-selected custom key.
    */
    'customShardKey': string;
    /**
    * Human-readable label of the database to manage for this Global Cluster.
    */
    'db': string;
    /**
    * Flag that indicates whether someone hashed the custom shard key for the specified collection. If you set this value to `false`, MongoDB Cloud uses ranged sharding.
    */
    'isCustomShardKeyHashed'?: boolean;
    /**
    * Flag that indicates whether someone [hashed](https://www.mongodb.com/docs/manual/reference/method/sh.shardCollection/#hashed-shard-keys) the custom shard key. If this parameter returns `false`, this cluster uses [ranged sharding](https://www.mongodb.com/docs/manual/core/ranged-sharding/).
    */
    'isShardKeyUnique'?: boolean;
    /**
    * Minimum number of chunks to create initially when sharding an empty collection with a [hashed shard key](https://www.mongodb.com/docs/manual/core/hashed-sharding/).
    */
    'numInitialChunks'?: number;
    /**
    * Flag that indicates whether MongoDB Cloud should create and distribute initial chunks for an empty or non-existing collection. MongoDB Cloud distributes data based on the defined zones and zone ranges for the collection.
    */
    'presplitHashedZones'?: boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "collection",
            "baseName": "collection",
            "type": "string",
            "format": ""
        },
        {
            "name": "customShardKey",
            "baseName": "customShardKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "db",
            "baseName": "db",
            "type": "string",
            "format": ""
        },
        {
            "name": "isCustomShardKeyHashed",
            "baseName": "isCustomShardKeyHashed",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isShardKeyUnique",
            "baseName": "isShardKeyUnique",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "numInitialChunks",
            "baseName": "numInitialChunks",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "presplitHashedZones",
            "baseName": "presplitHashedZones",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ManagedNamespaces.attributeTypeMap;
    }

    public constructor() {
    }
}

