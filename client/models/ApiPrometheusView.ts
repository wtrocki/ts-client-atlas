/**
 * MongoDB Atlas Administration API
 * The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* Details to integrate one Prometheus account with one MongoDB Cloud project.
*/
export class ApiPrometheusView {
    /**
    * Flag that indicates whether someone has activated the Prometheus integration.
    */
    'enabled': boolean;
    /**
    * Combination of IPv4 address and Internet Assigned Numbers Authority (IANA) port or the IANA port alone to which Prometheus binds to ingest MongoDB metrics.
    */
    'listenAddress'?: string;
    'password'?: string;
    'rateLimitInterval'?: number;
    /**
    * Security Scheme to apply to HyperText Transfer Protocol (HTTP) traffic between Prometheus and MongoDB Cloud.
    */
    'scheme': ApiPrometheusViewSchemeEnum;
    /**
    * Desired method to discover the Prometheus service.
    */
    'serviceDiscovery': ApiPrometheusViewServiceDiscoveryEnum;
    /**
    * Root-relative path to the Transport Layer Security (TLS) Privacy Enhanced Mail (PEM) key and certificate file on the host.
    */
    'tlsPemPath'?: string;
    /**
    * Human-readable label that identifies the service to which you want to integrate with MongoDB Cloud. The value must match the third-party service integration type.
    */
    'type'?: ApiPrometheusViewTypeEnum;
    /**
    * Human-readable label that identifies your Prometheus incoming webhook.
    */
    'username': string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "listenAddress",
            "baseName": "listenAddress",
            "type": "string",
            "format": ""
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string",
            "format": ""
        },
        {
            "name": "rateLimitInterval",
            "baseName": "rateLimitInterval",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "scheme",
            "baseName": "scheme",
            "type": "ApiPrometheusViewSchemeEnum",
            "format": ""
        },
        {
            "name": "serviceDiscovery",
            "baseName": "serviceDiscovery",
            "type": "ApiPrometheusViewServiceDiscoveryEnum",
            "format": ""
        },
        {
            "name": "tlsPemPath",
            "baseName": "tlsPemPath",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "ApiPrometheusViewTypeEnum",
            "format": ""
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ApiPrometheusView.attributeTypeMap;
    }

    public constructor() {
    }
}


export type ApiPrometheusViewSchemeEnum = "http" | "https" ;
export type ApiPrometheusViewServiceDiscoveryEnum = "http" | "file" ;
export type ApiPrometheusViewTypeEnum = "PROMETHEUS" ;

