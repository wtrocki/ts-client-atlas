/**
 * MongoDB Atlas Administration API
 * The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Link } from '../models/Link';
import { Raw } from '../models/Raw';
import { ReplicaSetEventTypeViewForNdsGroup } from '../models/ReplicaSetEventTypeViewForNdsGroup';
import { HttpFile } from '../http/http';

/**
* ReplicaSet Event identifies different activities about replica set of mongod instances.
*/
export class ForNdsGroup {
    /**
    * Date and time when this event occurred. This parameter expresses its value in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.
    */
    'created': Date;
    'eventTypeName': ReplicaSetEventTypeViewForNdsGroup;
    /**
    * Unique 24-hexadecimal digit string that identifies the project in which the event occurred. The **eventId** identifies the specific event.
    */
    'groupId'?: string;
    /**
    * Unique 24-hexadecimal digit string that identifies the event.
    */
    'id': string;
    /**
    * List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
    */
    'links'?: Array<Link>;
    /**
    * Unique 24-hexadecimal digit string that identifies the organization to which these events apply.
    */
    'orgId'?: string;
    /**
    * IANA port on which the MongoDB process listens for requests.
    */
    'port'?: number;
    'raw'?: Raw;
    /**
    * Human-readable label of the replica set associated with the event.
    */
    'replicaSetName'?: string;
    /**
    * Human-readable label of the shard associated with the event.
    */
    'shardName'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "created",
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "eventTypeName",
            "baseName": "eventTypeName",
            "type": "ReplicaSetEventTypeViewForNdsGroup",
            "format": ""
        },
        {
            "name": "groupId",
            "baseName": "groupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>",
            "format": ""
        },
        {
            "name": "orgId",
            "baseName": "orgId",
            "type": "string",
            "format": ""
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "Raw",
            "format": ""
        },
        {
            "name": "replicaSetName",
            "baseName": "replicaSetName",
            "type": "string",
            "format": ""
        },
        {
            "name": "shardName",
            "baseName": "shardName",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ForNdsGroup.attributeTypeMap;
    }

    public constructor() {
    }
}



