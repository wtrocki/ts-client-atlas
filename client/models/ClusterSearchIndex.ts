/**
 * MongoDB Atlas Administration API
 * The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas.  The Atlas Administration API uses HTTP Digest Authentication to authenticate requests. Provide a programmatic API public key and corresponding private key as the username and password when constructing the HTTP request. For example, to [return database access history](#tag/Access-Tracking/operation/listAccessLogsByClusterName) with [cURL](https://en.wikipedia.org/wiki/CURL), run the following command in the terminal:  ``` curl --user \"{PUBLIC-KEY}:{PRIVATE-KEY}\" \\   --digest \\   --header \"Accept: application/vnd.atlas.2023-02-01+json\" \\   GET \"https://cloud.mongodb.com/api/atlas/v2/groups/{groupId}/dbAccessHistory/clusters/{clusterName}?pretty=true\" ```  To learn more, see [Get Started with the Atlas Administration API](https://www.mongodb.com/docs/atlas/configure-api-access/). For support, see [MongoDB Support](https://www.mongodb.com/support/get-started).
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiAtlasFTSAnalyzers } from '../models/ApiAtlasFTSAnalyzers';
import { ApiAtlasFTSMappings } from '../models/ApiAtlasFTSMappings';
import { SearchSynonymMappingDefinition } from '../models/SearchSynonymMappingDefinition';
import { HttpFile } from '../http/http';

export class ClusterSearchIndex {
    /**
    * Human-readable label that identifies the collection that contains one or more Atlas Search indexes.
    */

    'collectionName': string;
    /**
    * Human-readable label that identifies the database that contains the collection with one or more Atlas Search indexes.
    */

    'database': string;
    /**
    * Unique 24-hexadecimal digit string that identifies this Atlas Search index.
    */

    'indexID'?: string;
    /**
    * Human-readable label that identifies this index. Within each namespace, names of all indexes in the namespace must be unique.
    */

    'name': string;
    /**
    * Condition of the search index when you made this request.  | Status | Index Condition |  |---|---|  | IN_PROGRESS | Atlas is building or re-building the index after an edit. |  | STEADY | You can use this search index. |  | FAILED | Atlas could not build the index. |  | MIGRATING | Atlas is upgrading the underlying cluster tier and migrating indexes. |  | PAUSED | The cluster is paused. | 
    */

    'status'?: string;
    /**
    * Type of the index. Warning: vectorSearch is not yet generally available. Default type is search.
    */

    'type'?: string;
    /**
    * Specific pre-defined method chosen to convert database field text into searchable words. This conversion reduces the text of fields into the smallest units of text. These units are called a **term** or **token**. This process, known as tokenization, involves a variety of changes made to the text in fields:  - extracting words - removing punctuation - removing accents - changing to lowercase - removing common words - reducing words to their root form (stemming) - changing words to their base form (lemmatization)  MongoDB Cloud uses the selected process to build the Atlas Search index.
    */

    'analyzer'?: string;
    /**
    * List of user-defined methods to convert database field text into searchable words.
    */

    'analyzers'?: Array<ApiAtlasFTSAnalyzers>;

    'mappings'?: ApiAtlasFTSMappings;
    /**
    * Method applied to identify words when searching this index.
    */

    'searchAnalyzer'?: string;
    /**
    * Rule sets that map words to their synonyms in this index.
    */

    'synonyms'?: Array<SearchSynonymMappingDefinition>;

    'fields'?: Array<{ [key: string]: any; }>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "collectionName",
            "baseName": "collectionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "database",
            "baseName": "database",
            "type": "string",
            "format": ""
        },
        {
            "name": "indexID",
            "baseName": "indexID",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "analyzer",
            "baseName": "analyzer",
            "type": "string",
            "format": ""
        },
        {
            "name": "analyzers",
            "baseName": "analyzers",
            "type": "Array<ApiAtlasFTSAnalyzers>",
            "format": ""
        },
        {
            "name": "mappings",
            "baseName": "mappings",
            "type": "ApiAtlasFTSMappings",
            "format": ""
        },
        {
            "name": "searchAnalyzer",
            "baseName": "searchAnalyzer",
            "type": "string",
            "format": ""
        },
        {
            "name": "synonyms",
            "baseName": "synonyms",
            "type": "Array<SearchSynonymMappingDefinition>",
            "format": ""
        },
        {
            "name": "fields",
            "baseName": "fields",
            "type": "Array<{ [key: string]: any; }>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ClusterSearchIndex.attributeTypeMap;
    }

    public constructor() {
    }
}

